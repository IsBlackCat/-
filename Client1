package training1;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Scanner;

public class Client1 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		OutputStream os = null;
		InputStream is = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		OutputStreamWriter osw = null;
		BufferedWriter bw = null;
		Socket socket = null;
		try {
			socket = new Socket("localhost", 8888);
			os = socket.getOutputStream();
			is = socket.getInputStream();
			osw = new OutputStreamWriter(os);
			bw = new BufferedWriter(osw);
			isr = new InputStreamReader(is);
			br = new BufferedReader(isr);
			
			System.out.println(br.readLine());
			String s = sc.next();
			bw.write(s);
			bw.newLine();
			bw.flush();
			System.out.println(br.readLine());
			String flag = sc.next();
			bw.write(flag);
			bw.newLine();
			bw.flush();
			while(flag.equals("Y") || flag.equals("y")) {
				Client1.addRental(br, bw);
				System.out.println(br.readLine());
				flag = sc.next();
				bw.write(flag);
				bw.newLine();
				bw.flush();
			}
			System.out.println(br.readLine());
			Client1.bill(br, bw);
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(bw != null) bw.close();
				if(br != null) br.close();
				if(osw != null) osw.close();
				if(isr != null) isr.close();
				if(is != null) is.close();
				if(os != null) os.close();
				if(socket != null) socket.close();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		
	}
	
	public static void addRental(BufferedReader br, BufferedWriter bw) throws Exception{
		Scanner sc = new Scanner(System.in);
		System.out.println(br.readLine());
		bw.write(sc.next());
		bw.newLine();
		bw.flush();
		System.out.println(br.readLine());
		System.out.println(br.readLine());
		System.out.println(br.readLine());
		System.out.println(br.readLine());
		int typeCode = sc.nextInt();
		bw.write(typeCode);
		bw.flush();
		try {
			boolean flag = false;
			for(int i = 0; i < Book.bookList.size(); i++) {
				if(Book.bookList.get(i) == typeCode)
					flag = true;
			}
			if(!flag) {
				throw new MyException(typeCode);
			}
			if(flag) {
				System.out.println(br.readLine());
				bw.write(sc.nextInt());
				bw.flush();
			}
		}catch(MyException e) {
			System.out.println("租赁失败！类型输入错误");
		}
		
	}
	
	public static void bill(BufferedReader br, BufferedWriter bw) throws Exception{
		System.out.println(br.readLine());
		System.out.println();
		int n = br.read();
		System.out.println("----------------------------------------");
		for(int i = 0; i < n; i++) {
			String bookName = br.readLine();
			String leaseDays = br.readLine();
			String price = br.readLine();
			System.out.printf("%s\t%s\t%s\t", bookName, leaseDays, price);
			System.out.println();
		}
		System.out.println("----------------------------------------");
		System.out.println(br.readLine());
	}
}
